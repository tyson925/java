Írj egy interfészt Kolcsonozheto néven, mely két metódussal rendelkezik: a kikolcsonoz metódus két egész szám típusú paramétert vár és logikai értékkel tér vissza, a visszahoz metódus nem vár paramétert, és szintén igaz/hamis értéket adhat vissza. A kikolcsonoz metódus HibasKolcsonzesException kivételt dobhat, ehhez készítsd el a HibasKolcsonzesException osztályt. Ebbol az osztalybol szamazzon egy NotFoundException osztaly is.

Írj egy Video osztályt, mely implementálja a Kolcsonozheto interfészt! Az osztály a következő adattagokkal rendelkezzen: film címe (szöveges), ki van-e kölcsönözve (logikai), mennyi időre kölcsönözhető (szöveges, lehetséges értékei: „egynapos”, „kétnapos”, „korlátlan”), milyen korhatáros (értéke 0, 12, 16 vagy 18 lehet). Az osztályhoz 3 paramétert váró konstruktor tartozik, melynek segítségével inicializálható, a kölcsönözhető adattag minden új példány esetén igaz értéket kap. A kikolcsonoz metódus implementációja paraméterként kapja, hogy hány éves a kölcsönző személy és mennyi időre vinné el a videót (napokban), ez alapján megvizsgálja, hogy az adott videó kiadható-e. Ez azt jelenti, hogy meg kell vizsgálni, korhatárban megfelel-e a kölcsönző életkorának és kölcsönözhető-e a megadott időtartamra – amennyiben valamelyik feltétel nem teljesül, HibasKolcsonzesException hibát kell dobni. Amennyiben a videó éppen ki van kölcsönözve, akkor hamissal térjen vissza. A visszahoz metódus implementációja a ki van-e kölcsönözve adattagot hamisra állítja. Az osztályhoz tartoznak getterek, setterek és toString metódus.

Írj egy OktatoVideo osztályt, mely a Video osztály leszármazottja, és belőle más osztály már nem származhat. Tartozzon hozzá paraméteres konstruktor, hasonlóan az ősosztályhoz, annyi különbséggel, hogy a korhatár minden esetben 0 legyen (ennek megfelelően a konstruktor 2 paramétert vár). A kikolcsonoz metódus felüldefiniálásában a korhatárt nem kell ellenőrizni, viszont azt továbbra is kell, hogy mennyi időre szólhat a kölcsönzés.

Írj egy VideoTeka nevű osztályt, melynek két adattagja két Map típusú kollekció, az egyik Video, a másik OktatoVideo típusú objektumot tud tárolni. A Map-ek kulcs értékei legyenek a video címei, míg az értékei maguk a Videok (Kolcsonozheto interfacet implementáló objektumok Map<String,Kolcsonozheto>). Az osztályhoz tartozzon default konstruktor, valamint egy hozzaad metódus, mely Video típusú paramétert vár, majd az alapján, hogy a kapott paraméter Video vagy OktatoVideo típusú, beteszi azt a megfelelő kollekcióba. Legyen egy keres metódus is, ami String értéket vár, a videó címét, valamint egy logikai paramétert (oktatóvideót keresünk-e). Amennyiben nem talalhato az adott film a tekaban, dobj egy NotFoundException hibat. A metódus a megfelelő kollekcióból a megadott című elemet kéri le, és azzal tér vissza. A helyes működéshez szükséges a Video valamint az OktatoVideo osztályokban a HashCode valamint equals metodusokat kifejteni.

Írj egy futtatható osztályt, mely megnyit egy „input.txt” nevű fájlt! A fájl első sora tartalmazza azt, hogy hány további sor van a fájlban. A további sorok pontosvesszővel elválasztott Stringeket tartalmaznak: az első elem a videó címét, a második az „egynapos”, „kétnapos”, illetve „korlátlan” szavak valamelyikét tartalmazza, és amennyiben videóról van szó, akkor a harmadik elem a korhatár. StringTokenizer (vagy splitter) segítségével dolgozd fel a sorokat, és hozd létre a megadott számú Video vagy OktatoVideo objektumot. Példányosítsd a VideoTeka osztályt, majd a hozzaad metódus segítségével tedd bele a létrehozott objektumokat. Ezután kérd le a keres metódus segítségével keres meg egy filmet, és hívd meg a kikolcsonoz metódusát. A ki-, bemeneti és más hibákat kapd el, és írj ki valamilyen, a felhasználó számára is értelmezhető hibaüzenetet! Végül Serializáld ki a VideoTeka objektumot a videoTeka.ser fileba.